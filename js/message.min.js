/*message.html JS*/
//封装消息对象
var message = function(sender, sendername, senderImg, localheader, type, time, timestamp, isLoaded, isSended, content) {
	return {
		sender: sender,
		sendername: sendername,
		senderImg: senderImg, //头像的网络的网络地址
		localHeader: localheader,
		type: type,
		time: time,
		timestamp: timestamp,
		isLoaded: isLoaded,
		isSended: isSended,
		content: content
	}
}

//压缩聊天图片
var getBase64 = function(localpath, name, imgurl, gid, saveUrl) {
	var img = new Image();
	img.src = localpath; // 传过来的图片
	//图片处理
	img.onload = function() {
		//生成比例
		var w = this.width,
			h = this.height,
			scale = w / h;
		w = 500 || w; //480 你想压缩到多大
		h = w / scale;
		//生成canvas
		var canvas = document.createElement('canvas');
		var ctx = canvas.getContext('2d');
		canvas.width = w;
		canvas.height = h;

		ctx.drawImage(this, 0, 0, w, h);
		sendMessage(canvas.toDataURL('image/jpeg', 0.4), name, imgurl, gid, saveUrl);

	}
}

//表情引入
var importFace = function() {
	RongIMLib.RongIMEmoji.init();
	var emojis = RongIMLib.RongIMEmoji.emojis;
	mui('.faceBox').on('tap', 'span', function() {
		document.querySelector('#msg-text').value += RongIMLib.RongIMEmoji.symbolToEmoji(this.getAttribute('name'));
		document.querySelector('#msg-type').classList.add('mui-icon-paperplane');

	})
}

//复制文本内容
var copyToClip = function(str) {
	if(mui.os.android) {
		var Context = plus.android.importClass("android.content.Context");
		var main = plus.android.runtimeMainActivity();
		var clip = main.getSystemService(Context.CLIPBOARD_SERVICE);
		//console.log(str);
		plus.android.invoke(clip, "setText", str);
	} else {
		//获取剪切板
		var UIPasteboard = plus.ios.importClass("UIPasteboard");
		var generalPasteboard = UIPasteboard.generalPasteboard();
		// 设置/获取文本内容:
		generalPasteboard.setValueforPasteboardType(str, "public.utf8-plain-text");
		var value = generalPasteboard.valueForPasteboardType("public.utf8-plain-text");
	}

}

//长按复制	
var LongForCopy = function() {
		mui('#msg-list').on('longtap', '.msg-content', function() {
			var str = this.innerText;
			mui('.mui-popover').popover('show');
			document.getElementById("msgPopover").addEventListener('tap', function() {
				mui('.mui-popover').popover('hide');
				copyToClip(str);
			})
		})
	}
	//处理发送语音样式
var msgItemTap = function(msgItem, event) {
	var msgType = msgItem.getAttribute('msg-type');
	var msgContent = msgItem.getAttribute('msg-content');
	var playState = msgItem.querySelector('.play-state');
	var play = null; //设置只为了给停止播放提供量
	if(msgType == 'VoiceMessage') {
		if(currentVoice.length == 0) {
			currentVoice.push({
				content: msgContent,
				playstate: playState
			});
			var duration;
			player = plus.audio.createPlayer(currentVoice[0].content);
			currentVoice[0].playstate.innerText = '正在播放...';
			setTimeout(function() {
				duration = player.getDuration() + 0.5;
			}, 300);
			player.play(function() {
				currentVoice[0].playstate.innerText = parseInt(duration) + ' "  ';
				currentVoice.pop();
			}, function(e) {
				currentVoice[0].playstate.innerText = '点击播放';
			});
		} else {
			player.stop();
			currentVoice[0].playstate.innerText = '点击播放';
			currentVoice.pop();
			msgItemTap(msgItem, event);
		}
	}
};

//显示语音输入框
var setSoundAlertVisable = function(show) {
	if(show) {
		document.querySelector('#sound-alert').style.display = 'block';
		document.querySelector('#sound-alert').style.opacity = 1;
	} else {
		document.querySelector('#sound-alert').style.opacity = 0;
		//fadeOut 完成再真正隐藏
		setTimeout(function() {
			document.querySelector('#sound-alert').style.display = 'none';
		}, 200);
	}
};

//输入框加焦点

var msgTextFocus = function() {
		document.querySelector('#msg-text').focus();
		setTimeout(function() {
			document.querySelector('#msg-text').focus();
		}, 150);
	}
	//文件转base64
var audioBase64 = function(path, name, imgurl, gid, saveUrl) {
	plus.io.resolveLocalFileSystemURL(path, function(entry) {
		var reader = new plus.io.FileReader();
		reader.onload = function(e) {
			var s = e.target.result;
			var se = s.replace(/[ ]/g, " ");
			console.log('发送' + s);
			sendMessage(s, name, imgurl, gid, saveUrl);
		}
		reader.readAsDataURL(entry);
	})
}

//提前加载历史消息
var advanceLoad = function(rid, page, offset, callback) {
	if(plus.storage.getItem('user')) {
		var uid = JSON.parse(plus.storage.getItem('user')).uid;
	}
	var goodjob = 'http://120.24.36.146/',
		advanceRecord = [];
	page = page + parseInt(offset / 10); //若超过10条则翻页
	var realOffset = offset % 10; //单页的信息偏移量
	mui.ajax(XW.base + 'rongcloud/history/load/' + rid + '?page=' + page, {
		dataType: 'json', //服务器返回json格式数据
		type: 'post', //HTTP请求类型
		async: true,
		timeout: 1000, //超时时间设置为10秒；
		success: function(data) {
			console.log(page + '   ' + offset + '  ' + data.length);
			for(var i = realOffset; i < data.length; i++) {
//					console.log("历史记录  "+data[i].sendContent);
				var sender = (data[i].sendId == uid ? 'self' : ''),
					time = (i == data.length - 1 ? app.timestampToTime(data[i].sendTime * 1000) : ''),
					username = data[i].userName,
					avatar = ( data[i].avatar == '\/sites\/default\/files\/avatar\/default.jpg' ?  '../../images/default.jpg' :data[i].avatar),
					type = data[i].messageType,
					timestamp = data[i].sendTime * 1000;
				if(data[i].messageType == 'ImageMessage') {
					data[i].sendContent = goodjob + data[i].sendContent;
					advanceRecord.push(message(sender, username, avatar, msgUser.imgUrlocal, type, time, timestamp, 'load', true, data[i].sendContent));
				} else if(data[i].messageType == 'VoiceMessage') {
					var base64str = 'data:audio/amr;base64,' + data[i].sendContent;
					dataURL2Audio(base64str, function(entry) {
						advanceRecord.push(message(sender, username, avatar, msgUser.imgUrlocal, type, time, timestamp, 'load', true, entry.toURL()));
					})

				} else {
					data[i].sendContent = RongIMLib.RongIMEmoji.symbolToEmoji(data[i].sendContent);
					advanceRecord.push(message(sender, username, avatar, msgUser.imgUrlocal, type, time, timestamp, 'load', true, data[i].sendContent));
				}
			};
			advanceRecord = advanceRecord.reverse();
			callback(advanceRecord);
		},
		error: function(e) {
			mui.toast('网络状况不好，请稍后加载！');
			callback('查看更多消息');
		}
	});

}

//渲染jsp模板，将record变量导入模板
var bindMsgList = function() {
	//初始化图片预览器
	var imageViewer = new mui.ImageViewer('.msg-content-image', {
		dbl: false
	});
	document.querySelector('#msg-list').innerHTML = template('msg-template', {
		"record": record[rid],
		"groupId": rid
	});
	var msgItems = document.querySelector('#msg-list').querySelectorAll('.msg-item');
	var msgMore = document.querySelector('#msg-list').querySelectorAll('.msg-more');
	[].forEach.call(msgItems, function(item, index) {
		item.addEventListener('tap', function(event) {
			msgItemTap(item, event); //点击接听语音
		}, false);
	});
	[].forEach.call(msgMore, function(item, index) {
		item.addEventListener('tap', function(event) {
			recordSize = (record[rid] == null ? 0 : record[rid].length);
			this.innerHTML = '<span class="mui-icon mui-icon-spinner-cycle"></span>';
			advanceLoad(rid, 0, recordSize, function(data) {
			if(data.length == 0 ){
				console.log("无更多消息");
				item.innerHTML = '无更多消息';
			}else{
				
				record[rid] = data.concat(record[rid]);
				bindMsgList();
			}
			})
		}, false)
	});
	imageViewer.findAllImage(); //点击图片进行预览
};

//创建消息推送
function createLocalPushMsg(msg, gname) {
	var options = {
		cover: true,
		title: gname
	};
	plus.push.createMessage(msg, "LocalMSG", options);
	//if(plus.os.name == "iOS") {}
}

//根据群id得出群名
function getGnameByGid(groupId, callback) {
	mui.getJSON(XW.base + 'rongcloud/my_group_info', function(data) {
		mui.each(data, function(index, item) {
			if(groupId == item.groupId) {
				callback(item.groupName);
				return false;
			}
		})
	})
}

//手机切换后台推送聊天消息
function backstagePush(status, targetId, senderName, msgCount, str) {
	if(status == '后台') {
		console.log('msgcount=  ' + msgCount);
		if(msgCount > 1) {
			createLocalPushMsg('你有' + msgCount + '条未读消息', '薪窝兼职');
		} else {

			getGnameByGid(targetId, function(data) {
				createLocalPushMsg(senderName + '：' + str, data);
			})
		}
	}
}

//保证本地只缓存30条信息
function controlStorage(rid, controlNum) {
	if(plus.storage.getItem(rid)) {
		var groupMsg = JSON.parse(plus.storage.getItem(rid));
		if(groupMsg.length > controlNum) {
			groupMsg.splice(0, groupMsg.length - controlNum);
			plus.storage.setItem(rid, JSON.stringify(groupMsg));
		}
	}
}

//从缓存块读取当前用户以检索查询用户的接口中的头像信息
function matchMsgUser(rid, uid, callback) {
	mui.getJSON(XW.base + 'rongcloud/group/queryUser?groupId=' + rid, function(data) {
		mui.each(data, function(index, item) {
			if(uid == item.userId) {
				console.log('当前的用户' + JSON.stringify(item));
				console.log('当前的头像为  ' + item.image);
				item.image = (item.image == '' ? XW.xw+'/sites/default/files/avatar/default.jpg' : item.image)
				msgUser = {
					userName: item.userName,
					imgUrc: item.image,
					imgUrlocal: ''
				}
				callback(msgUser);
				return false;
			}

		})
	})
}

/**
 * base64字符串转成语音文件(参考http://ask.dcloud.net.cn/question/16935)
 * @param {Object} base64Str
 * @param {Object} callback
 */
function dataURL2Audio(base64Str, callback) {
	var base64Str = base64Str.replace('data:audio/amr;base64,', '');
	var audioName = (new Date()).valueOf() + '.amr';
	plus.io.requestFileSystem(plus.io.PRIVATE_DOC, function(fs) {
		fs.root.getFile(audioName, {
			create: true
		}, function(entry) {
			// 获得平台绝对路径
			var fullPath = entry.fullPath;
			if(mui.os.android) {
				// 读取音频
				var Base64 = plus.android.importClass("android.util.Base64");
				var FileOutputStream = plus.android.importClass("java.io.FileOutputStream");
				try {
					console.log("进来dataUrl");
					var out = new FileOutputStream(fullPath);
					var bytes = Base64.decode(base64Str, Base64.DEFAULT);
					out.write(bytes);
					out.close();
					// 回调
					callback && callback(entry);
				} catch(e) {
					console.log(e.message);
				}
			} else if(mui.os.ios) {
				var NSData = plus.ios.importClass('NSData');
				var nsData = new NSData();
				nsData = nsData.initWithBase64EncodedStringoptions(base64Str, 0);
				if(nsData) {
					nsData.plusCallMethod({
						writeToFile: fullPath,
						atomically: true
					});
					plus.ios.deleteObject(nsData);
				}
				// 回调
				callback && callback(entry);
			}
		})
	})
}